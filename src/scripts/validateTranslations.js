/**
 * validateTranslations.js
 * Script simple para validar que todas las traducciones est√°n presentes
 * Ejecutar con: node src/scripts/validateTranslations.js
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ VALIDANDO SISTEMA DE TRADUCCIONES\n');

const LOCALES_DIR = path.join(__dirname, '../locales');
const LANGUAGES = ['es', 'en', 'fr'];
const SECTIONS = [
  'navbar',
  'hero', 
  'addons',
  'packages',
  'process',
  'cta',
  'footer',
  'gender',
  'systems',
  'packageComparison',
  'addOnExplorer',
  'biomarkers'
];

let totalFiles = 0;
let missingFiles = 0;
let totalKeys = 0;
const stats = {};

// Inicializar estad√≠sticas
LANGUAGES.forEach(lang => {
  stats[lang] = { files: 0, keys: 0, missing: [] };
});

console.log('üìÇ VERIFICANDO ARCHIVOS DE TRADUCCI√ìN:');
console.log('=====================================');

LANGUAGES.forEach(language => {
  console.log(`\nüåç Idioma: ${language.toUpperCase()}`);
  console.log('-'.repeat(30));
  
  SECTIONS.forEach(section => {
    const filePath = path.join(LOCALES_DIR, language, `${section}.json`);
    totalFiles++;
    
    if (fs.existsSync(filePath)) {
      try {
        const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        const keyCount = Object.keys(content).length;
        
        console.log(`‚úÖ ${section}.json (${keyCount} claves)`);
        stats[language].files++;
        stats[language].keys += keyCount;
        totalKeys += keyCount;
      } catch (error) {
        console.log(`‚ùå ${section}.json (Error JSON)`);
        stats[language].missing.push(section);
        missingFiles++;
      }
    } else {
      console.log(`‚ùå ${section}.json (No existe)`);
      stats[language].missing.push(section);
      missingFiles++;
    }
  });
});

console.log('\n\nüìä ESTAD√çSTICAS FINALES:');
console.log('========================');
console.log(`Total archivos esperados: ${totalFiles}`);
console.log(`Archivos presentes: ${totalFiles - missingFiles}`);
console.log(`Archivos faltantes: ${missingFiles}`);
console.log(`Total claves de traducci√≥n: ${totalKeys}`);

const completionPercentage = ((totalFiles - missingFiles) / totalFiles * 100).toFixed(1);
console.log(`\nüéØ Progreso: ${completionPercentage}%`);

console.log('\nüìà DESGLOSE POR IDIOMA:');
console.log('-'.repeat(40));
LANGUAGES.forEach(lang => {
  const langStats = stats[lang];
  const langCompletion = (langStats.files / SECTIONS.length * 100).toFixed(1);
  
  console.log(`\n${lang.toUpperCase()}:`);
  console.log(`  Archivos: ${langStats.files}/${SECTIONS.length} (${langCompletion}%)`);
  console.log(`  Claves: ${langStats.keys}`);
  
  if (langStats.missing.length > 0) {
    console.log(`  Faltantes: ${langStats.missing.join(', ')}`);
  }
});

if (missingFiles === 0) {
  console.log('\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!');
  console.log('====================================');
  console.log('‚úÖ Todas las traducciones est√°n presentes');
  console.log('‚úÖ Sistema modular implementado');
  console.log('‚úÖ 12 secciones en 3 idiomas');
  console.log(`‚úÖ ${totalKeys} claves de traducci√≥n totales`);
} else {
  console.log('\n‚ö†Ô∏è  MIGRACI√ìN PARCIALMENTE COMPLETADA');
  console.log('===================================');
  console.log(`Faltan ${missingFiles} archivos por completar`);
}

console.log('\nüöÄ BENEFICIOS LOGRADOS:');
console.log('-'.repeat(30));
console.log('‚Ä¢ Archivos peque√±os y manejables');
console.log('‚Ä¢ F√°cil encontrar traducciones espec√≠ficas');
console.log('‚Ä¢ Estructura modular escalable');
console.log('‚Ä¢ Soporte para m√∫ltiples idiomas');
console.log('‚Ä¢ Fallbacks inteligentes al espa√±ol');
console.log('‚Ä¢ Validaci√≥n autom√°tica del sistema');

console.log('\nüí° PR√ìXIMOS PASOS:');
console.log('-'.repeat(20));
console.log('1. Integrar NewLanguageContext.js en la aplicaci√≥n');
console.log('2. Reemplazar el contexto antiguo');
console.log('3. Probar la aplicaci√≥n con las nuevas traducciones');
console.log('4. Agregar m√°s idiomas f√°cilmente'); 